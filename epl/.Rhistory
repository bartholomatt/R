p1Skill = 2
determineWinner(2,3,.5)
determineWinner(2,3,.5)
determineWinner(2,3,.5)
determineWinner(2,3,.5)
poolidge = function(p1Skill, p2Skill, pVictory){
tableLookup = unlist(strsplit(score_table[p1Skill,p2Skill],'/'))
p1ToWin = as.numeric(tableLookup[1])
p2ToWin = as.numeric(tableLookup[2])
nTrials = 10000
results = rep(0,nTrials)
for(x in 1:nTrials){
results[x] = determineWinner(p1ToWin,p2ToWin,pVictory)
}
simMean = mean(results)
simSD = sd(results)
theplot = ggplot(data.frame(net_points=results) ,aes(x=net_points) ) +
geom_histogram(bins = 13) +
scale_x_discrete(limits = c(-3,-2,-1,0,1,2,3))
retObject = list(simMean,simSD,theplot)
return(retObject)
}
poolidge(2,3,.4)
determineWinner = function(gamesToWin1, gamesToWin2, pVictory){
gamesWonP1 = 0
gamesWonP2 = 0
while ((gamesWonP1 < gamesToWin1) & (gamesWonP2 < gamesToWin2)){
roll = runif(1)
if (roll < pVictory){
gamesWonP1 = gamesWonP1 + 1
}else{
gamesWonP2 = gamesWonP2 + 1}
}
results = (c(gamesWonP1,gamesWonP2))
points1 = 0
points2 = 0
if(gamesWonP2 == 0){
points1 = 3
points2 = 0
}else if(gamesWonP1 == 0){
points1 = 0
points2 = 3
}else if(gamesWonP1 == gamesToWin1){
points1 = 2
}else if(gamesWonP2 == gamesToWin2){
points2 = 2
}
#hill checks
if(gamesWonP1 == gamesToWin1-1){
points1 = 1
}
if (gamesWonP2 == gamesToWin2 -1){
points2 = 1
}
return(points1 - points2)
}
determineWinner(2,3,.5)
determineWinner(2,3,.5)
determineWinner(2,3,.5)
determineWinner(2,3,.5)
determineWinner(2,3,.5)
determineWinner(2,3,.5)
determineWinner(2,3,.5)
determineWinner(2,3,.5)
determineWinner(2,3,.5)
determineWinner(2,3,.5)
determineWinner(2,3,.5)
determineWinner(2,3,.5)
poolidge = function(p1Skill, p2Skill, pVictory){
tableLookup = unlist(strsplit(score_table[p1Skill,p2Skill],'/'))
p1ToWin = as.numeric(tableLookup[1])
p2ToWin = as.numeric(tableLookup[2])
nTrials = 10000
results = rep(0,nTrials)
for(x in 1:nTrials){
results[x] = determineWinner(p1ToWin,p2ToWin,pVictory)
}
simMean = mean(results)
simSD = sd(results)
theplot = ggplot(data.frame(net_points=results) ,aes(x=net_points) ) +
geom_histogram(bins = 13) +
scale_x_discrete(limits = c(-3,-2,-1,0,1,2,3))
retObject = list(simMean,simSD,theplot)
return(retObject)
}
poolidge(2,3,.4)
poolidge(2,3,.35)
poolidge(3,3,.35)
poolidge(6,3,.8 )
poolidge(3,3,.5)
poolidge(4,3,.6)
poolidge(6,3,.6)
poolidge(4,3,.65)
poolidge(6,3,.65)
poolidge(6,3,.85)
poolidge = function(p1Skill, p2Skill, pVictory){
tableLookup = unlist(strsplit(score_table[p1Skill,p2Skill],'/'))
p1ToWin = as.numeric(tableLookup[1])
p2ToWin = as.numeric(tableLookup[2])
nTrials = 10000
results = rep(0,nTrials)
for(x in 1:nTrials){
results[x] = determineWinner(p1ToWin,p2ToWin,pVictory)
}
simMean = mean(results)
simSD = sd(results)
theplot = ggplot(data.frame(net_points=results) ,aes(x=net_points) ) +
geom_histogram(bins = 7) +
scale_x_discrete(limits = c(-3,-2,-1,0,1,2,3))
retObject = list(simMean,simSD,theplot)
return(retObject)
}
poolidge(6,3,.8)
poolidge = function(p1Skill, p2Skill, pVictory){
tableLookup = unlist(strsplit(score_table[p1Skill,p2Skill],'/'))
p1ToWin = as.numeric(tableLookup[1])
p2ToWin = as.numeric(tableLookup[2])
nTrials = 10000
results = rep(0,nTrials)
for(x in 1:nTrials){
results[x] = determineWinner(p1ToWin,p2ToWin,pVictory)
}
simMean = mean(results)
simSD = sd(results)
theplot = ggplot(data.frame(net_points=results) ,aes(x=net_points) ) +
geom_histogram(bins = 13) +
scale_x_discrete(limits = c(-3,-2,-1,0,1,2,3))
retObject = list(simMean,simSD,theplot)
return(retObject)
}
poolidge(6,3,.8)
poolidge(6,3,.85)
poolidge(6,3,.8)
diff(2,3)
library(dplyr)
library(ggplot2)
library(shiny)
#crap. We're gonna have to manually enter the scoring table.
ones = c('','','','','','','')
twos = c('','2/2','3/2','4/2','5/2','6/2','7/2')
threes = c('','2/3','2/2','3/2','4/2','5/2','6/2')
fours = c('','2/4','2/3','3/3','4/3','5/3','5/2')
fives = c('','2/5','2/4','3/4','4/4','5/4','5/3')
sixes = c('','2/6','2/5','3/5','4/5','5/5','5/4')
sevens = c('','2/7','2/6','2/5','3/5','4/5','5/5')
score_table = data.frame(ones,twos,threes,fours,fives,sixes,sevens,stringsAsFactors = FALSE)
determineWinner = function(gamesToWin1, gamesToWin2, pVictory){
gamesWonP1 = 0
gamesWonP2 = 0
while ((gamesWonP1 < gamesToWin1) & (gamesWonP2 < gamesToWin2)){
roll = runif(1)
if (roll < pVictory){
gamesWonP1 = gamesWonP1 + 1
}else{
gamesWonP2 = gamesWonP2 + 1}
}
results = (c(gamesWonP1,gamesWonP2))
points1 = 0
points2 = 0
if(gamesWonP2 == 0){
points1 = 3
points2 = 0
}else if(gamesWonP1 == 0){
points1 = 0
points2 = 3
}else if(gamesWonP1 == gamesToWin1){
points1 = 2
}else if(gamesWonP2 == gamesToWin2){
points2 = 2
}
#hill checks
if(gamesWonP1 == gamesToWin1-1){
points1 = 1
}
if (gamesWonP2 == gamesToWin2 -1){
points2 = 1
}
return(points1 - points2)
}
determineWinner(2,3,.5)
#
# mean(results)
# sd(results)
# ggplot(data.frame(net_points=results) ,aes(x=net_points) ) +geom_histogram(bins = 13) + scale_x_discrete(limits = c(-3,-2,-1,0,1,2,3))
#
p1Skill = 2
p2Skill = 3
pVictory = .4
poolidge = function(p1Skill, p2Skill, pVictory){
tableLookup = unlist(strsplit(score_table[p1Skill,p2Skill],'/'))
p1ToWin = as.numeric(tableLookup[1])
p2ToWin = as.numeric(tableLookup[2])
nTrials = 10000
results = rep(0,nTrials)
for(x in 1:nTrials){
results[x] = determineWinner(p1ToWin,p2ToWin,pVictory)
}
simMean = mean(results)
simSD = sd(results)
theplot = ggplot(data.frame(net_points=results) ,aes(x=net_points) ) +
geom_histogram(bins = 13) +
scale_x_discrete(limits = c(-3,-2,-1,0,1,2,3))
retObject = list(simMean,simSD,theplot)
return(retObject)
}
ui = fluipage(
sidebarLayout(
titlePanel('Palvin Pollidge Top Secret'),
sidebarPanel(numericInput(inputId = 'ourScore'
,label = 'Input Our Team Player Rating'
,value = 3
,min = 2, max = 7, step = 1),
numericInput(inputId = 'theirScore'
,label = 'Input Their Team Player Rating'
,value = 3
,min = 2, max = 7, step = 1),
numericInput(inputId = 'pWin')
,label = 'Input %Probability of our Team Winning'
,value = .5
,min = 0, max = 1, step = .05
),
mainPanel(plotOutput(outputId = 'mainPlot')
)
)
)
server = function(input,output) {
saveoutPut = poolidge(input$ourSkill, input$theirSkill, input$pWin)
output$mainPlot = saveoutPut[[3]]
}
shinyapp(ui = ui, server = server)
ui = fluidPage(
sidebarLayout(
titlePanel('Palvin Pollidge Top Secret'),
sidebarPanel(numericInput(inputId = 'ourScore'
,label = 'Input Our Team Player Rating'
,value = 3
,min = 2, max = 7, step = 1),
numericInput(inputId = 'theirScore'
,label = 'Input Their Team Player Rating'
,value = 3
,min = 2, max = 7, step = 1),
numericInput(inputId = 'pWin')
,label = 'Input %Probability of our Team Winning'
,value = .5
,min = 0, max = 1, step = .05
),
mainPanel(plotOutput(outputId = 'mainPlot')
)
)
)
ui = fluidPage(
titlePanel('Palvin Pollidge Top Secret'),
sidebarLayout(
sidebarPanel(numericInput(inputId = 'ourScore'
,label = 'Input Our Team Player Rating'
,value = 3
,min = 2, max = 7, step = 1),
numericInput(inputId = 'theirScore'
,label = 'Input Their Team Player Rating'
,value = 3
,min = 2, max = 7, step = 1),
numericInput(inputId = 'pWin')
,label = 'Input %Probability of our Team Winning'
,value = .5
,min = 0, max = 1, step = .05
),
mainPanel(plotOutput(outputId = 'mainPlot')
)
)
)
ui = fluidPage(
#titlePanel('Palvin Pollidge Top Secret'),
sidebarLayout(
sidebarPanel(numericInput(inputId = 'ourScore'
,label = 'Input Our Team Player Rating'
,value = 3
,min = 2, max = 7, step = 1),
numericInput(inputId = 'theirScore'
,label = 'Input Their Team Player Rating'
,value = 3
,min = 2, max = 7, step = 1),
numericInput(inputId = 'pWin')
,label = 'Input %Probability of our Team Winning'
,value = .5
,min = 0, max = 1, step = .05
),
mainPanel(plotOutput(outputId = 'mainPlot')
)
)
)
sidebarPanel(numericInput(inputId = 'ourScore'
,label = 'Input Our Team Player Rating'
,value = 3
,min = 2, max = 7, step = 1)
)
mainPanel(plotOutput(outputId = 'mainPlot')
)
ui = fluidPage(
#titlePanel('Palvin Pollidge Top Secret'),
sidebarLayout(
sidebarPanel(numericInput(inputId = 'ourScore'
,label = 'Input Our Team Player Rating'
,value = 3
,min = 2, max = 7, step = 1),
numericInput(inputId = 'theirScore'
,label = 'Input Their Team Player Rating'
,value = 3
,min = 2, max = 7, step = 1),
numericInput(inputId = 'pWin')
,label = 'Input %Probability of our Team Winning'
,value = .5
,min = 0, max = 1, step = .05
),
mainPanel(plotOutput(outputId = 'mainPlot')
)
)
)
ui = fluidPage(
#titlePanel('Palvin Pollidge Top Secret'),
sidebarLayout(
sidebarPanel(numericInput(inputId = 'ourScore',
label = 'Input Our Team Player Rating',
value = 3,
min = 2, max = 7, step = 1),
numericInput(inputId = 'theirScore',
label = 'Input Their Team Player Rating',
value = 3,
min = 2, max = 7, step = 1),
numericInput(inputId = 'pWin',
label = 'Input %Probability of our Team Winning',
value = .5,
min = 0, max = 1, step = .05
)
),
mainPanel(plotOutput(outputId = 'mainPlot')
)
)
)
runApp('Documents/GitHub/R/Untitled.R')
runApp('Documents/GitHub/R/Untitled.R')
runApp('Documents/GitHub/R/Untitled.R')
poolidge(2,2,.5)[[3]]
runApp('Documents/GitHub/R/Untitled.R')
runApp('Documents/GitHub/R/Untitled.R')
runApp('Documents/GitHub/R/Untitled.R')
runApp('Documents/GitHub/R/Untitled.R')
runApp('Documents/GitHub/R/Untitled.R')
runApp('Documents/GitHub/R/Untitled.R')
poolidge = function(p1Skill, p2Skill, pVictory){
tableLookup = unlist(strsplit(score_table[p1Skill,p2Skill],'/'))
p1ToWin = as.numeric(tableLookup[1])
p2ToWin = as.numeric(tableLookup[2])
nTrials = 10000
results = rep(0,nTrials)
for(x in 1:nTrials){
results[x] = determineWinner(p1ToWin,p2ToWin,pVictory)
}
simMean = mean(results)
simSD = sd(results)
theplot = ggplot(data.frame(net_points=results) ,aes(x=net_points) ) +
geom_histogram(bins = 13) +
scale_x_discrete(limits = c(-3,-2,-1,0,1,2,3)) +
labs(title = paste('Expected Points', simMean))
retObject = list(simMean,simSD,theplot)
return(retObject)
}
runApp('Documents/GitHub/R/Untitled.R')
round(3.2222,2)
runApp('Documents/GitHub/R/palvinPoolidge.R')
runApp('Documents/GitHub/R/palvinPoolidge.R')
runApp('Documents/GitHub/R/palvinPoolidge.R')
runApp('Documents/GitHub/R/palvinPoolidge.R')
runApp('Documents/GitHub/R/palvinPoolidge.R')
runApp('Documents/GitHub/R/PalvinPoolidge')
5000*.5
5000*.2
5000*.3
library(tidyverse)
epl = read_csv('EPL_Set.csv')
epl_tidy = epl %>%
select(-c(Div, HTHG, HTAG, HTR)) %>%
mutate(home_win = ifelse(FTR == 'H',1,0),
away_win = ifelse(FTR == 'A',1,0),
draw = ifelse(FTR == 'D',1,0))
glimpse(epl_tidy)
team_explorer = function(teamName, season){
homeGames = filter(epl_tidy, HomeTeam == teamName & Season == season) %>%
summarize(wins = sum(home_win) , losses = sum(away_win),draws = sum(draw), GF = sum(FTHG), GA = sum(FTAG))
awayGames = filter(epl_tidy, AwayTeam == teamName & Season == season) %>%
summarize(wins = sum(away_win),losses = sum(home_win), draws = sum(draw), GF = sum(FTAG), GA = sum(FTHG))
combined = rbind(homeGames,awayGames)
tabulated = data.frame(teamName = teamName,
season = season,
W = sum(combined$wins),
D = sum(combined$draws),
L = sum(combined$losses),
totalPoints = sum(combined$wins) * 3 + sum(combined$draws) ,
GF = sum(combined$GF),
GA = sum(combined$GA)) %>%
mutate(GD = GF - GA)
return(tabulated)
}
team_explorer('Liverpool','2001-02')
season_explorer = function(season){
teamsA = unique(filter(epl_tidy, Season == season)$HomeTeam)
df = do.call(rbind, Map(function(x) team_explorer(x,season), x = teamsA)) %>%
data.frame() %>%
arrange(desc(totalPoints), desc(GD)) %>%
mutate(place = order(desc(totalPoints)))
return(df)
}
season_explorer('2001-02')
allSeasons = unique(epl_tidy$Season)
megaSheet = do.call(rbind, Map(function(x) season_explorer(x), x = allSeasons)) %>%
data.frame()
megaSheet %>%
filter(place == 2) %>%
View()
epl = read_csv('EPL_Set.csv')
setwd('Documents/GitHub/R/epl/')
epl = read_csv('EPL_Set.csv')
epl_tidy = epl %>%
select(-c(Div, HTHG, HTAG, HTR)) %>%
mutate(home_win = ifelse(FTR == 'H',1,0),
away_win = ifelse(FTR == 'A',1,0),
draw = ifelse(FTR == 'D',1,0))
glimpse(epl_tidy)
team_explorer = function(teamName, season){
homeGames = filter(epl_tidy, HomeTeam == teamName & Season == season) %>%
summarize(wins = sum(home_win) , losses = sum(away_win),draws = sum(draw), GF = sum(FTHG), GA = sum(FTAG))
awayGames = filter(epl_tidy, AwayTeam == teamName & Season == season) %>%
summarize(wins = sum(away_win),losses = sum(home_win), draws = sum(draw), GF = sum(FTAG), GA = sum(FTHG))
combined = rbind(homeGames,awayGames)
tabulated = data.frame(teamName = teamName,
season = season,
W = sum(combined$wins),
D = sum(combined$draws),
L = sum(combined$losses),
totalPoints = sum(combined$wins) * 3 + sum(combined$draws) ,
GF = sum(combined$GF),
GA = sum(combined$GA)) %>%
mutate(GD = GF - GA)
return(tabulated)
}
team_explorer('Liverpool','2001-02')
season_explorer = function(season){
teamsA = unique(filter(epl_tidy, Season == season)$HomeTeam)
df = do.call(rbind, Map(function(x) team_explorer(x,season), x = teamsA)) %>%
data.frame() %>%
arrange(desc(totalPoints), desc(GD)) %>%
mutate(place = order(desc(totalPoints)))
return(df)
}
season_explorer('2001-02')
allSeasons = unique(epl_tidy$Season)
megaSheet = do.call(rbind, Map(function(x) season_explorer(x), x = allSeasons)) %>%
data.frame()
megaSheet %>%
filter(place == 2) %>%
View()
View(megaSheet)
team_explorer('Liverpool','2001-02')
View(epl_tidy)
epl_tidy = epl %>%
select(-c(Div, HTHG, HTAG, HTR)) %>%
mutate(home_win = ifelse(FTR == 'H',1,0),
away_win = ifelse(FTR == 'A',1,0),
draw = ifelse(FTR == 'D',1,0)) %>%
group_by(HomeTeam,AwayTeam,Date) %>%
mutate(wk = order())
epl_tidy = epl %>%
select(-c(Div, HTHG, HTAG, HTR)) %>%
mutate(home_win = ifelse(FTR == 'H',1,0),
away_win = ifelse(FTR == 'A',1,0),
draw = ifelse(FTR == 'D',1,0)) %>%
group_by(HomeTeam,AwayTeam,Date) %>%
mutate(wk = 1)
glimpse(epl_tidy)
epl_tidy = epl %>%
select(-c(Div, HTHG, HTAG, HTR)) %>%
mutate(home_win = ifelse(FTR == 'H',1,0),
away_win = ifelse(FTR == 'A',1,0),
draw = ifelse(FTR == 'D',1,0)) %>%
group_by(HomeTeam,AwayTeam,Date) %>%
sort(Date)
?sorted
?sort
epl_tidy = epl %>%
select(-c(Div, HTHG, HTAG, HTR)) %>%
mutate(home_win = ifelse(FTR == 'H',1,0),
away_win = ifelse(FTR == 'A',1,0),
draw = ifelse(FTR == 'D',1,0)) %>%
group_by(HomeTeam,AwayTeam,Date) %>%
arrange(Date)
epl_tidy = epl %>%
select(-c(Div, HTHG, HTAG, HTR)) %>%
mutate(home_win = ifelse(FTR == 'H',1,0),
away_win = ifelse(FTR == 'A',1,0),
draw = ifelse(FTR == 'D',1,0)) %>%
group_by(HomeTeam,AwayTeam,Date) %>%
arrange(HomeTeam,Date)
glimpse(epl_tidy)
epl_tidy = epl %>%
select(-c(Div, HTHG, HTAG, HTR)) %>%
mutate(home_win = ifelse(FTR == 'H',1,0),
away_win = ifelse(FTR == 'A',1,0),
draw = ifelse(FTR == 'D',1,0)) %>%
group_by(Season,HomeTeam,AwayTeam)
?count
megaSheet %>%
filter(place == 2) %>%
View()
